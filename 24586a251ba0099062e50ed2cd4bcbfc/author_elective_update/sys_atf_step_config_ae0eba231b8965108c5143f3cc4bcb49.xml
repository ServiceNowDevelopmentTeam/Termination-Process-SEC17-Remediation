<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_atf_step_config">
    <sys_atf_step_config action="DELETE">
        <active>true</active>
        <batch_order_constraint/>
        <can_mutate_page>false</can_mutate_page>
        <category display_value="Server">317c4dc20b202200a8d7a12cf6673aa8</category>
        <class_name/>
        <class_type>script</class_type>
        <deprecated>false</deprecated>
        <description_generator><![CDATA[function generateDescription() {
    // the global variable 'step' represents the current glide record
    var description = "Trigger SEC17 Fix Script Process";
	// your code here
	return description;
}
 generateDescription();
]]></description_generator>
        <html_description><![CDATA[<p>Trigger SEC17 Fix Script Process</p>]]></html_description>
        <icon>icon-article-document</icon>
        <inputs/>
        <name>Trigger SEC17 Fix Script Process</name>
        <order>0</order>
        <outputs/>
        <step_env display_value="Server - Independent">6c2bcea1870312009dccc9ded0e3ecca</step_env>
        <step_execution_generator><![CDATA[(function() {
	var i=0;
	try {
		var importGR = new GlideRecord('x_apig_sox_record_term_list');
		importGR.addEncodedQuery('u_onpremisesdistinguishednameLIKEOU=Users');
		importGR.query();

		while(importGR.next()){
			if(!userExists(importGR.getValue('u_userprincipalname').toString())){
				createUser(importGR);
			}

			var inputs = {};
			inputs['employee_email'] = importGR.getValue('u_userprincipalname'); // String
			inputs['due_date'] = '2023-02-10 23:00:00'; // Date/Time 
			inputs['remind_date'] = '2023-02-07 01:00:00'; // Date/Time 
			inputs['remind_date_2'] = '2023-02-09 01:00:00'; // Date/Time 
			inputs['azure_last_login'] = cleanUpDate(importGR.getValue('u_aadlastsignindatetime')); // String 
			inputs['ad_last_login'] = cleanUpDate(importGR.getValue('u_adlastlogondate')); // String 
			var adLoginDate = cleanUpDate(importGR.u_adlastlogondate.toString());
			var azureLoginDate = cleanUpDate(importGR.u_aadlastsignindatetime.toString());
			var createdDate = importGR.u_created.toString();

			inputs['created'] = createdDate; // String 
			inputs['ad_last_login'] = adLoginDate; // String 
			inputs['azure_last_login'] = azureLoginDate; // String 

			sn_fd.FlowAPI.getRunner().subflow('x_apig_sox_record.sec05_inactive_employee_review_process__generate_catalog_item_submissions').inBackground().withInputs(inputs).run();
			importGR.deleteRecord();
			i++;
		}
		var finalImportGR = new GlideRecord('x_apig_sox_record_term_list');
		finalImportGR.query();
		finalImportGR.deleteMultiple();
		gs.error("Terminations Run: " + i);
	} catch (ex) {
		var message = ex;
		gs.error("Creating Terminations Failed: " + message);
		gs.error("Terminations Run Before Failure: " + i);
	}

	//Check if the supplied user exists, searching by email and returning true/false
	function userExists(userEmail){
		if (!gs.nil(userEmail)){
			var encodedQuery = 'email=' + userEmail + '^ORu_user_principal_name=' + userEmail;
			var userGr = new GlideRecord('sys_user');
			userGr.addEncodedQuery(encodedQuery);
			userGr.query();

			return userGr.hasNext();
		}
		return false;
	}	
	
	function getCompany(distinguishedName){

		distinguishedName = distinguishedName.substring(distinguishedName.indexOf('OU=Users,')+12);

		distinguishedName = distinguishedName.substring(0,distinguishedName.indexOf(',OU=Companies'));

		var distinguishedNameArray = distinguishedName.split(',OU=');

		for(var i=0; i < distinguishedNameArray.length; i++){
			var companyGr = new GlideRecord('core_company');
			companyGr.addQuery('name',distinguishedNameArray[i]);
			companyGr.query();
			if(companyGr.next()){
				return companyGr.sys_id.toString(); 
			}
		}
		return '64b51c9f1b021050f5a3635bbc4bcb11';//Default to APi Group
	}
	
	//Create a user from the supplied import set record, returns void
	function createUser(importGR){
		var newUserGr = new GlideRecord('sys_user');
		newUserGr.initialize();
		newUserGr.setValue('user_name',importGR.getValue('u_userprincipalname'));
		newUserGr.setValue('u_user_principal_name',importGR.getValue('u_userprincipalname'));
		newUserGr.setValue('email',importGR.getValue('u_userprincipalname'));
		newUserGr.setValue('name',importGR.getValue('u_displayname').toString());
		newUserGr.setValue('u_description', 'User was auto-created by SEC17 process.');
		newUserGr.setValue('company',getCompany(importGR.u_onpremisesdistinguishedname.toString()));
		
		var managerSysId = getManager(importGR.getValue('u_manager'));
		if(managerSysId){
			newUserGr.setValue('manager', managerSysId);
		}
		newUserGr.insert();
	}

	//Get manager from email, returns sys_id
	function getManager(managerEmail){
		var encodedQuery = 'email=' + managerEmail + '^ORu_user_principal_name=' + managerEmail;
		var managerGr = new GlideRecord('sys_user');
		managerGr.addEncodedQuery(encodedQuery);
		managerGr.query();
		if(managerGr.next()){
			return managerGr.sys_id.toString();
		}
		return '';
	}

	//Clean up and validate incoming dates returns cleaned up date or errors if validation fails
	function cleanUpDate(dirtyDate){
		var cleanDate = '';

		//Return if date empty
		if(dirtyDate === '' || gs.nil(dirtyDate)){return '';}

		//Throw error if unexpected format
		if(!dirtyDate.match(/^\d?\d\/\d?\d\/\d{4} ? ?\d?\d:\d{2}:\d{2} [A]?[P]?M$/g)){
			if(dirtyDate.match(/^\d{4}-\d?\d-\d?\d ? ?\d?\d:\d{2}:\d{2}/g)){
				var dateSplit = dirtyDate.split('-');
				var year = dateSplit[0];
				var month = dateSplit[1];
				var day = dateSplit[2].split(' ')[0];
				var timeSplit = dateSplit[2].split(' ')[1].split(':');
				var hours = parseInt(timeSplit[0]) > 12 ? (parseInt(timeSplit[0]) - 12).toString() : timeSplit[0];
				var minutes = timeSplit[1];
				var seconds = timeSplit[2];
				dirtyDate = month + '/' +
					day + '/' +
					year + ' ' +
					hours + ':' +
					minutes + ':' +
					seconds + ' ' +
					(parseInt(timeSplit[0]) >= 12 ? 'PM' : 'AM');
			}
			//date = mm/dd/yyyy hh:mm
			else if(dirtyDate.match(/^\d?\d\/\d?\d\/\d{4} ?\d?\d:\d{2}/g)){
				var dateSplit = dirtyDate.split('/');
				var month = dateSplit[0];
				var day = dateSplit[1];
				var year = dateSplit[2].split(' ')[0];
				var timeSplit = dateSplit[2].split(' ')[1].split(':');
				var hours = parseInt(timeSplit[0]) > 12 ? (parseInt(timeSplit[0]) - 12).toString() : timeSplit[0];
				var minutes = timeSplit[1];
				var seconds = '00';
				dirtyDate = month + '/' +
					day + '/' +
					year + ' ' +
					hours + ':' +
					minutes + ':' +
					seconds + ' ' +
					(parseInt(timeSplit[0]) >= 12 ? 'PM' : 'AM');
			}
			else if(dirtyDate.match(/^\d?\d\/\d?\d\/\d{2} ? ?\d?\d:\d{2} [A]?[P]?M$/g)){
				var splitDate = dirtyDate.split('/');
				var dirtyDate = splitDate[0] + '/' +
					splitDate[1] + '/20' +
					splitDate[2];
				splitDate = dirtyDate.split(' ');
				var dirtyDate = splitDate[0] + ' ' +
					splitDate[1] + ':00 ' +
					splitDate[2];

			}
			else{
				throw 'Date did not match expected format: ' + dirtyDate;
			}
		}

		//Add zero to beginning of dates if it's not double digits in the date
		if(dirtyDate != '' && !(dirtyDate.slice(0,2).match(/\d\d/g))){
			cleanDate = '0' + dirtyDate;
		}

		else cleanDate = dirtyDate;
		return cleanDate;
	}
})();]]></step_execution_generator>
        <sys_class_name>sys_atf_step_config</sys_class_name>
        <sys_created_by>Terry.Lillo</sys_created_by>
        <sys_created_on>2023-02-22 15:59:37</sys_created_on>
        <sys_id>ae0eba231b8965108c5143f3cc4bcb49</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_name>Trigger SEC17 Fix Script Process</sys_name>
        <sys_package display_value="Termination Process SEC17 Remediation" source="x_apig_sox_record">24586a251ba0099062e50ed2cd4bcbfc</sys_package>
        <sys_policy/>
        <sys_scope display_value="Termination Process SEC17 Remediation">24586a251ba0099062e50ed2cd4bcbfc</sys_scope>
        <sys_update_name>sys_atf_step_config_ae0eba231b8965108c5143f3cc4bcb49</sys_update_name>
        <sys_updated_by>Terry.Lillo</sys_updated_by>
        <sys_updated_on>2023-02-22 16:39:17</sys_updated_on>
        <template_reminder>Trigger SEC17 Fix Script Process</template_reminder>
        <type display_value="Test Step" name="sys_atf_step">e6f9282f1b251010e7004229bc4bcb70</type>
        <wizard_redirect/>
    </sys_atf_step_config>
    <sys_translated_text action="DELETE" query="documentkey=ae0eba231b8965108c5143f3cc4bcb49"/>
    <sys_variable_value action="DELETE" query="document_key=ae0eba231b8965108c5143f3cc4bcb49"/>
    <sys_update_version action="INSERT_OR_UPDATE">
        <action>DELETE</action>
        <application display_value="Termination Process SEC17 Remediation">24586a251ba0099062e50ed2cd4bcbfc</application>
        <file_path/>
        <instance_id>37412023db6dd890ad8dd7c8f49619a0</instance_id>
        <instance_name>apigroupdev</instance_name>
        <name>sys_atf_step_config_ae0eba231b8965108c5143f3cc4bcb49</name>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_atf_step_config"&gt;&lt;sys_atf_step_config action="INSERT_OR_UPDATE"&gt;&lt;active&gt;true&lt;/active&gt;&lt;batch_order_constraint/&gt;&lt;can_mutate_page&gt;false&lt;/can_mutate_page&gt;&lt;category display_value="Server"&gt;317c4dc20b202200a8d7a12cf6673aa8&lt;/category&gt;&lt;class_name/&gt;&lt;class_type&gt;script&lt;/class_type&gt;&lt;deprecated&gt;false&lt;/deprecated&gt;&lt;description_generator&gt;&lt;![CDATA[function generateDescription() {
    // the global variable 'step' represents the current glide record
    var description = "Trigger SEC17 Fix Script Process";
	// your code here
	return description;
}
 generateDescription();
]]&gt;&lt;/description_generator&gt;&lt;html_description&gt;&lt;![CDATA[&lt;p&gt;Trigger SEC17 Fix Script Process&lt;/p&gt;]]&gt;&lt;/html_description&gt;&lt;icon&gt;icon-article-document&lt;/icon&gt;&lt;inputs/&gt;&lt;name&gt;Trigger SEC17 Fix Script Process&lt;/name&gt;&lt;order&gt;0&lt;/order&gt;&lt;outputs/&gt;&lt;step_env display_value="Server - Independent"&gt;6c2bcea1870312009dccc9ded0e3ecca&lt;/step_env&gt;&lt;step_execution_generator&gt;&lt;![CDATA[(function() {
	var i=0;
	try {
		var importGR = new GlideRecord('x_apig_sox_record_term_list');
		importGR.addEncodedQuery('u_onpremisesdistinguishednameLIKEOU=Users');
		importGR.query();

		while(importGR.next()){
			if(!userExists(importGR.getValue('u_userprincipalname').toString())){
				createUser(importGR);
			}

			var inputs = {};
			inputs['employee_email'] = importGR.getValue('u_userprincipalname'); // String
			inputs['due_date'] = '2023-02-10 23:00:00'; // Date/Time 
			inputs['remind_date'] = '2023-02-07 01:00:00'; // Date/Time 
			inputs['remind_date_2'] = '2023-02-09 01:00:00'; // Date/Time 
			inputs['azure_last_login'] = cleanUpDate(importGR.getValue('u_aadlastsignindatetime')); // String 
			inputs['ad_last_login'] = cleanUpDate(importGR.getValue('u_adlastlogondate')); // String 
			var adLoginDate = cleanUpDate(importGR.u_adlastlogondate.toString());
			var azureLoginDate = cleanUpDate(importGR.u_aadlastsignindatetime.toString());
			var createdDate = importGR.u_created.toString();

			inputs['created'] = createdDate; // String 
			inputs['ad_last_login'] = adLoginDate; // String 
			inputs['azure_last_login'] = azureLoginDate; // String 

			sn_fd.FlowAPI.getRunner().subflow('x_apig_sox_record.sec05_inactive_employee_review_process__generate_catalog_item_submissions').inBackground().withInputs(inputs).run();
			importGR.deleteRecord();
			i++;
		}
		var finalImportGR = new GlideRecord('x_apig_sox_record_term_list');
		finalImportGR.query();
		finalImportGR.deleteMultiple();
		gs.error("Terminations Run: " + i);
	} catch (ex) {
		var message = ex;
		gs.error("Creating Terminations Failed: " + message);
		gs.error("Terminations Run Before Failure: " + i);
	}

	//Check if the supplied user exists, searching by email and returning true/false
	function userExists(userEmail){
		if (!gs.nil(userEmail)){
			var encodedQuery = 'email=' + userEmail + '^ORu_user_principal_name=' + userEmail;
			var userGr = new GlideRecord('sys_user');
			userGr.addEncodedQuery(encodedQuery);
			userGr.query();

			return userGr.hasNext();
		}
		return false;
	}	
	
	function getCompany(distinguishedName){

		distinguishedName = distinguishedName.substring(distinguishedName.indexOf('OU=Users,')+12);

		distinguishedName = distinguishedName.substring(0,distinguishedName.indexOf(',OU=Companies'));

		var distinguishedNameArray = distinguishedName.split(',OU=');

		for(var i=0; i &lt; distinguishedNameArray.length; i++){
			var companyGr = new GlideRecord('core_company');
			companyGr.addQuery('name',distinguishedNameArray[i]);
			companyGr.query();
			if(companyGr.next()){
				return companyGr.sys_id.toString(); 
			}
		}
		return '64b51c9f1b021050f5a3635bbc4bcb11';//Default to APi Group
	}
	
	//Create a user from the supplied import set record, returns void
	function createUser(importGR){
		var newUserGr = new GlideRecord('sys_user');
		newUserGr.initialize();
		newUserGr.setValue('user_name',importGR.getValue('u_userprincipalname'));
		newUserGr.setValue('u_user_principal_name',importGR.getValue('u_userprincipalname'));
		newUserGr.setValue('email',importGR.getValue('u_userprincipalname'));
		newUserGr.setValue('name',importGR.getValue('u_displayname').toString());
		newUserGr.setValue('u_description', 'User was auto-created by SEC17 process.');
		newUserGr.setValue('company',getCompany(importGR.u_onpremisesdistinguishedname.toString()));
		
		var managerSysId = getManager(importGR.getValue('u_manager'));
		if(managerSysId){
			newUserGr.setValue('manager', managerSysId);
		}
		newUserGr.insert();
	}

	//Get manager from email, returns sys_id
	function getManager(managerEmail){
		var encodedQuery = 'email=' + managerEmail + '^ORu_user_principal_name=' + managerEmail;
		var managerGr = new GlideRecord('sys_user');
		managerGr.addEncodedQuery(encodedQuery);
		managerGr.query();
		if(managerGr.next()){
			return managerGr.sys_id.toString();
		}
		return '';
	}

	//Clean up and validate incoming dates returns cleaned up date or errors if validation fails
	function cleanUpDate(dirtyDate){
		var cleanDate = '';

		//Return if date empty
		if(dirtyDate === '' || gs.nil(dirtyDate)){return '';}

		//Throw error if unexpected format
		if(!dirtyDate.match(/^\d?\d\/\d?\d\/\d{4} ? ?\d?\d:\d{2}:\d{2} [A]?[P]?M$/g)){
			if(dirtyDate.match(/^\d{4}-\d?\d-\d?\d ? ?\d?\d:\d{2}:\d{2}/g)){
				var dateSplit = dirtyDate.split('-');
				var year = dateSplit[0];
				var month = dateSplit[1];
				var day = dateSplit[2].split(' ')[0];
				var timeSplit = dateSplit[2].split(' ')[1].split(':');
				var hours = parseInt(timeSplit[0]) &gt; 12 ? (parseInt(timeSplit[0]) - 12).toString() : timeSplit[0];
				var minutes = timeSplit[1];
				var seconds = timeSplit[2];
				dirtyDate = month + '/' +
					day + '/' +
					year + ' ' +
					hours + ':' +
					minutes + ':' +
					seconds + ' ' +
					(parseInt(timeSplit[0]) &gt;= 12 ? 'PM' : 'AM');
			}
			//date = mm/dd/yyyy hh:mm
			else if(dirtyDate.match(/^\d?\d\/\d?\d\/\d{4} ?\d?\d:\d{2}/g)){
				var dateSplit = dirtyDate.split('/');
				var month = dateSplit[0];
				var day = dateSplit[1];
				var year = dateSplit[2].split(' ')[0];
				var timeSplit = dateSplit[2].split(' ')[1].split(':');
				var hours = parseInt(timeSplit[0]) &gt; 12 ? (parseInt(timeSplit[0]) - 12).toString() : timeSplit[0];
				var minutes = timeSplit[1];
				var seconds = '00';
				dirtyDate = month + '/' +
					day + '/' +
					year + ' ' +
					hours + ':' +
					minutes + ':' +
					seconds + ' ' +
					(parseInt(timeSplit[0]) &gt;= 12 ? 'PM' : 'AM');
			}
			else if(dirtyDate.match(/^\d?\d\/\d?\d\/\d{2} ? ?\d?\d:\d{2} [A]?[P]?M$/g)){
				var splitDate = dirtyDate.split('/');
				var dirtyDate = splitDate[0] + '/' +
					splitDate[1] + '/20' +
					splitDate[2];
				splitDate = dirtyDate.split(' ');
				var dirtyDate = splitDate[0] + ' ' +
					splitDate[1] + ':00 ' +
					splitDate[2];

			}
			else{
				throw 'Date did not match expected format: ' + dirtyDate;
			}
		}

		//Add zero to beginning of dates if it's not double digits in the date
		if(dirtyDate != '' &amp;&amp; !(dirtyDate.slice(0,2).match(/\d\d/g))){
			cleanDate = '0' + dirtyDate;
		}

		else cleanDate = dirtyDate;
		return cleanDate;
	}
})();]]&gt;&lt;/step_execution_generator&gt;&lt;sys_class_name&gt;sys_atf_step_config&lt;/sys_class_name&gt;&lt;sys_created_by&gt;Terry.Lillo&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2023-02-22 15:59:37&lt;/sys_created_on&gt;&lt;sys_id&gt;ae0eba231b8965108c5143f3cc4bcb49&lt;/sys_id&gt;&lt;sys_mod_count&gt;1&lt;/sys_mod_count&gt;&lt;sys_name&gt;Trigger SEC17 Fix Script Process&lt;/sys_name&gt;&lt;sys_package display_value="Termination Process SEC17 Remediation" source="x_apig_sox_record"&gt;24586a251ba0099062e50ed2cd4bcbfc&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="Termination Process SEC17 Remediation"&gt;24586a251ba0099062e50ed2cd4bcbfc&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_atf_step_config_ae0eba231b8965108c5143f3cc4bcb49&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;Terry.Lillo&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2023-02-22 16:39:17&lt;/sys_updated_on&gt;&lt;template_reminder&gt;Trigger SEC17 Fix Script Process&lt;/template_reminder&gt;&lt;type display_value="Test Step" name="sys_atf_step"&gt;e6f9282f1b251010e7004229bc4bcb70&lt;/type&gt;&lt;wizard_redirect/&gt;&lt;/sys_atf_step_config&gt;&lt;sys_translated_text action="delete_multiple" query="documentkey=ae0eba231b8965108c5143f3cc4bcb49"/&gt;&lt;sys_variable_value action="delete_multiple" query="document_key=ae0eba231b8965108c5143f3cc4bcb49"/&gt;&lt;/record_update&gt;</payload>
        <payload_hash>1116220012</payload_hash>
        <record_name>Trigger SEC17 Fix Script Process</record_name>
        <reverted_from/>
        <source>84635baf1bce911062e50ed2cd4bcb91</source>
        <source_table>sys_update_set</source_table>
        <state>previous</state>
        <sys_created_by>Terry.Lillo</sys_created_by>
        <sys_created_on>2023-02-22 16:39:17</sys_created_on>
        <sys_id>17a7cb6f1b8965108c5143f3cc4bcb65</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_recorded_at>18679fe5a900000001</sys_recorded_at>
        <sys_updated_by>Terry.Lillo</sys_updated_by>
        <sys_updated_on>2023-02-22 16:39:17</sys_updated_on>
        <type>Test Step Config</type>
        <update_guid>5ba7cb6f1e8965104e1b33342164a064</update_guid>
        <update_guid_history>5ba7cb6f1e8965104e1b33342164a064:1116220012,0e9e76637a8965101ef8d9b3e6c8da9c:-1255929684</update_guid_history>
    </sys_update_version>
    <sys_metadata_delete action="INSERT_OR_UPDATE">
        <sys_audit_delete/>
        <sys_class_name>sys_metadata_delete</sys_class_name>
        <sys_created_by>Terry.Lillo</sys_created_by>
        <sys_created_on>2023-03-01 15:55:22</sys_created_on>
        <sys_db_object display_value="" name="sys_atf_step_config">sys_atf_step_config</sys_db_object>
        <sys_id>2f06eef09e884d408df39d7dd7d1d100</sys_id>
        <sys_metadata>ae0eba231b8965108c5143f3cc4bcb49</sys_metadata>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Trigger SEC17 Fix Script Process</sys_name>
        <sys_package display_value="Termination Process SEC17 Remediation" source="x_apig_sox_record">24586a251ba0099062e50ed2cd4bcbfc</sys_package>
        <sys_parent/>
        <sys_policy/>
        <sys_scope display_value="Termination Process SEC17 Remediation">24586a251ba0099062e50ed2cd4bcbfc</sys_scope>
        <sys_scope_delete display_value="">2f88ffbf0c2845809e73338e3a3a8400</sys_scope_delete>
        <sys_update_name>sys_atf_step_config_ae0eba231b8965108c5143f3cc4bcb49</sys_update_name>
        <sys_update_version display_value="sys_atf_step_config_ae0eba231b8965108c5143f3cc4bcb49">17a7cb6f1b8965108c5143f3cc4bcb65</sys_update_version>
        <sys_updated_by>Terry.Lillo</sys_updated_by>
        <sys_updated_on>2023-03-01 15:55:22</sys_updated_on>
    </sys_metadata_delete>
</record_update>
