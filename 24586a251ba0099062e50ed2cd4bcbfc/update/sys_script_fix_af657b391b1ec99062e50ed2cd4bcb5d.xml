<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_fix">
    <sys_script_fix action="INSERT_OR_UPDATE">
        <before>false</before>
        <description/>
        <name>Generate SEC17 Employee Review Requests</name>
        <record_for_rollback>false</record_for_rollback>
        <script><![CDATA[(function() {
	var i=0;
	try {
		var importGR = new GlideRecord('x_apig_sox_record_term_list');
		importGR.addEncodedQuery('u_onpremisesdistinguishednameLIKEOU=Users');
		importGR.query();

		while(importGR.next()){
			if(!userExists(importGR.getValue('u_userprincipalname').toString())){
				createUser(importGR);
			}

			var inputs = {};
			inputs['employee_email'] = importGR.getValue('u_userprincipalname'); // String
			inputs['due_date'] = '2023-06-30 23:00:00'; // Date/Time 
			inputs['remind_date'] = '2023-06-26 01:00:00'; // Date/Time 
			inputs['remind_date_2'] = '2023-06-29 01:00:00'; // Date/Time 
			inputs['azure_last_login'] = cleanUpDate(importGR.getValue('u_aadlastsignindatetime')); // String 
			inputs['ad_last_login'] = cleanUpDate(importGR.getValue('u_adlastlogondate')); // String 
			var adLoginDate = cleanUpDate(importGR.u_adlastlogondate.toString());
			var azureLoginDate = cleanUpDate(importGR.u_aadlastsignindatetime.toString());
			var createdDate = importGR.u_created.toString();

			inputs['created'] = createdDate; // String 
			inputs['ad_last_login'] = adLoginDate; // String 
			inputs['azure_last_login'] = azureLoginDate; // String 

			sn_fd.FlowAPI.getRunner().subflow('x_apig_sox_record.sec05_inactive_employee_review_process__generate_catalog_item_submissions').inBackground().withInputs(inputs).run();
			importGR.deleteRecord();
			i++;
		}
		var finalImportGR = new GlideRecord('x_apig_sox_record_term_list');
		finalImportGR.query();
		finalImportGR.deleteMultiple();
		gs.error("Terminations Run: " + i);
	} catch (ex) {
		var message = ex;
		gs.error("Creating Terminations Failed: " + message);
		gs.error("Terminations Run Before Failure: " + i);
	}

	//Check if the supplied user exists, searching by email and returning true/false
	function userExists(userEmail){
		if (!gs.nil(userEmail)){
			var encodedQuery = 'email=' + userEmail + '^ORu_user_principal_name=' + userEmail;
			var userGr = new GlideRecord('sys_user');
			userGr.addEncodedQuery(encodedQuery);
			userGr.query();

			return userGr.hasNext();
		}
		return false;
	}	
	
	function getCompany(distinguishedName){

		distinguishedName = distinguishedName.substring(distinguishedName.indexOf('OU=Users,')+12);

		distinguishedName = distinguishedName.substring(0,distinguishedName.indexOf(',OU=Companies'));

		var distinguishedNameArray = distinguishedName.split(',OU=');

		for(var i=0; i < distinguishedNameArray.length; i++){
			var companyGr = new GlideRecord('core_company');
			companyGr.addQuery('name',distinguishedNameArray[i]);
			companyGr.query();
			if(companyGr.next()){
				return companyGr.sys_id.toString(); 
			}
		}
		return '64b51c9f1b021050f5a3635bbc4bcb11';//Default to APi Group
	}
	
	//Create a user from the supplied import set record, returns void
	function createUser(importGR){
		var newUserGr = new GlideRecord('sys_user');
		newUserGr.initialize();
		newUserGr.setValue('user_name',importGR.getValue('u_userprincipalname'));
		newUserGr.setValue('u_user_principal_name',importGR.getValue('u_userprincipalname'));
		newUserGr.setValue('email',importGR.getValue('u_userprincipalname'));
		newUserGr.setValue('name',importGR.getValue('u_displayname').toString());
		newUserGr.setValue('u_description', 'User was auto-created by SEC17 process.');
		newUserGr.setValue('company',getCompany(importGR.u_onpremisesdistinguishedname.toString()));
		
		var managerSysId = getManager(importGR.getValue('u_manager'));
		if(managerSysId){
			newUserGr.setValue('manager', managerSysId);
		}
		newUserGr.insert();
	}

	//Get manager from email, returns sys_id
	function getManager(managerEmail){
		var encodedQuery = 'email=' + managerEmail + '^ORu_user_principal_name=' + managerEmail;
		var managerGr = new GlideRecord('sys_user');
		managerGr.addEncodedQuery(encodedQuery);
		managerGr.query();
		if(managerGr.next()){
			return managerGr.sys_id.toString();
		}
		return '';
	}

	//Clean up and validate incoming dates returns cleaned up date or errors if validation fails
	function cleanUpDate(dirtyDate){
		var cleanDate = '';

		//Return if date empty
		if(dirtyDate === '' || gs.nil(dirtyDate)){return '';}

		//Throw error if unexpected format
		if(!dirtyDate.match(/^\d?\d\/\d?\d\/\d{4} ? ?\d?\d:\d{2}:\d{2} [A]?[P]?M$/g)){
			if(dirtyDate.match(/^\d{4}-\d?\d-\d?\d ? ?\d?\d:\d{2}:\d{2}/g)){
				var dateSplit = dirtyDate.split('-');
				var year = dateSplit[0];
				var month = dateSplit[1];
				var day = dateSplit[2].split(' ')[0];
				var timeSplit = dateSplit[2].split(' ')[1].split(':');
				var hours = parseInt(timeSplit[0]) > 12 ? (parseInt(timeSplit[0]) - 12).toString() : timeSplit[0];
				var minutes = timeSplit[1];
				var seconds = timeSplit[2];
				dirtyDate = month + '/' +
					day + '/' +
					year + ' ' +
					hours + ':' +
					minutes + ':' +
					seconds + ' ' +
					(parseInt(timeSplit[0]) >= 12 ? 'PM' : 'AM');
			}
			//date = mm/dd/yyyy hh:mm
			else if(dirtyDate.match(/^\d?\d\/\d?\d\/\d{4} ?\d?\d:\d{2}/g)){
				var dateSplit = dirtyDate.split('/');
				var month = dateSplit[0];
				var day = dateSplit[1];
				var year = dateSplit[2].split(' ')[0];
				var timeSplit = dateSplit[2].split(' ')[1].split(':');
				var hours = parseInt(timeSplit[0]) > 12 ? (parseInt(timeSplit[0]) - 12).toString() : timeSplit[0];
				var minutes = timeSplit[1];
				var seconds = '00';
				dirtyDate = month + '/' +
					day + '/' +
					year + ' ' +
					hours + ':' +
					minutes + ':' +
					seconds + ' ' +
					(parseInt(timeSplit[0]) >= 12 ? 'PM' : 'AM');
			}
			else if(dirtyDate.match(/^\d?\d\/\d?\d\/\d{2} ? ?\d?\d:\d{2} [A]?[P]?M$/g)){
				var splitDate = dirtyDate.split('/');
				var dirtyDate = splitDate[0] + '/' +
					splitDate[1] + '/20' +
					splitDate[2];
				splitDate = dirtyDate.split(' ');
				var dirtyDate = splitDate[0] + ' ' +
					splitDate[1] + ':00 ' +
					splitDate[2];

			}
			else{
				throw 'Date did not match expected format: ' + dirtyDate;
			}
		}

		//Add zero to beginning of dates if it's not double digits in the date
		if(dirtyDate != '' && !(dirtyDate.slice(0,2).match(/\d\d/g))){
			cleanDate = '0' + dirtyDate;
		}

		else cleanDate = dirtyDate;
		return cleanDate;
	}
})();]]></script>
        <sys_class_name>sys_script_fix</sys_class_name>
        <sys_created_by>Terry.Lillo</sys_created_by>
        <sys_created_on>2022-03-18 20:26:01</sys_created_on>
        <sys_id>af657b391b1ec99062e50ed2cd4bcb5d</sys_id>
        <sys_mod_count>76</sys_mod_count>
        <sys_name>Generate SEC17 Employee Review Requests</sys_name>
        <sys_package display_value="Termination Process SEC17 Remediation" source="x_apig_sox_record">24586a251ba0099062e50ed2cd4bcbfc</sys_package>
        <sys_policy/>
        <sys_scope display_value="Termination Process SEC17 Remediation">24586a251ba0099062e50ed2cd4bcbfc</sys_scope>
        <sys_update_name>sys_script_fix_af657b391b1ec99062e50ed2cd4bcb5d</sys_update_name>
        <sys_updated_by>Terry.Lillo</sys_updated_by>
        <sys_updated_on>2023-06-21 19:16:43</sys_updated_on>
        <unloadable>false</unloadable>
    </sys_script_fix>
</record_update>
